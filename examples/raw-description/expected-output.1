.TH DG "1" "2022\-10\-26" "example 0.1.0" "Generated Python Manual"
.SH NAME
dg \- templating system/generator for distributions
.SH SYNOPSIS
.B dg
[-h] [--projectdir PROJECTDIR] [--distro DIST] [--multispec MULTISPEC] [--multispec-selector MULTISPEC_SELECTOR] [--spec SPEC] [--output OUTPUT] [--macros-from PROJECTDIR] [--container CONTAINER_TYPE] [--macro MACRO] [--max-passes PASSES] (--template TEMPLATE | --multispec-combinations)
.SH DESCRIPTION
Generate script using predefined metadata about distribution and
templates.

As an example of 'dg' usage, to generate _Dockerfile_ for Fedora
21 64\-bit system, you may use command(s):

 $ cd project/directory
 $ dg \-\-spec      docker\-data.yaml      \\
      \-\-template  docker.tpl            \\
      \-\-distro    fedora\-21\-x86_64.yaml

.SH OPTIONS
.TP
\fB\-\-projectdir\fR \fI\,PROJECTDIR\/\fR
Directory with project (defaults to CWD)

.TP
\fB\-\-distro\fR \fI\,DIST\/\fR
Use distribution metadata specified by DIST yaml file

.TP
\fB\-\-multispec\fR \fI\,MULTISPEC\/\fR
Use MULTISPEC yaml file to fill the TEMPLATE file

.TP
\fB\-\-multispec\-selector\fR \fI\,MULTISPEC_SELECTOR\/\fR
Selectors for the multispec file

.TP
\fB\-\-spec\fR \fI\,SPEC\/\fR
Use SPEC yaml file to fill the TEMPLATE file

.TP
\fB\-\-output\fR \fI\,OUTPUT\/\fR
Write result to OUTPUT file instead of stdout

.TP
\fB\-\-macros\-from\fR \fI\,PROJECTDIR\/\fR
Load variables from PROJECTDIR

.TP
\fB\-\-container\fR \fI\,CONTAINER_TYPE\/\fR
Container type, e.g. 'docker'

.TP
\fB\-\-macro\fR \fI\,MACRO\/\fR
Define distgen's macro

.TP
\fB\-\-max\-passes\fR \fI\,PASSES\/\fR
Maximum number of rendering passes, defaults to 1 (== no re\-rendering)

.TP
\fB\-\-template\fR \fI\,TEMPLATE\/\fR
Use TEMPLATE file, e.g. docker.tpl or a template string, e.g. "{{ config.docker.from }}"

.TP
\fB\-\-multispec\-combinations\fR
Print available multispec combinations

.SH AUTHORS
.nf
John Doe <jd@example.com>
.fi

.SH DISTRIBUTION
The latest version of example may be downloaded from
.UR http://example.com
.UE
